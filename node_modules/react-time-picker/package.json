{
  "name": "react-time-picker",
  "version": "1.1.0",
  "description": "React Time Picker",
  "main": "lib/index.js",
  "scripts": {
    "test": "make test",
    "test-w": "make test-w",
    "test-debug": "mocha --debug-brk",
    "lib": "gulp",
    "dist": "webpack --progress --colors --config dist.config.js",
    "dist.nomoment": "webpack --progress --colors --config dist.nomoment.config.js",
    "dist.min": "webpack --progress --colors --optimize-minimize --optimize-occurence-order --optimize-dedupe --config dist.min.config.js",
    "dist.nomoment.min": "webpack --progress --colors --optimize-minimize --optimize-occurence-order --optimize-dedupe --config dist.nomoment.min.config.js",
    "build": "npm run lib && npm run dist && npm run dist.min && npm run dist.nomoment && npm run dist.nomoment.min",
    "dev": "webpack-dev-server --progress --colors"
  },
  "devDependencies": {
    "babel-core": "^5.4.3",
    "babel-loader": "^5.1.2",
    "css-loader": "^0.9.0",
    "exports-loader": "^0.6.2",
    "gulp": "^3.8.10",
    "gulp-babel": "^5.1.0",
    "mocha": "^2.1.0",
    "node-libs-browser": "^0.5.0",
    "should": "^5.0.0",
    "webpack": "^1.9.7",
    "webpack-dev-server": "^1.8.2"
  },
  "dependencies": {
    "has-touch": "^1.0.1",
    "object-assign": "^2.0.0",
    "react-event-names": "^1.0.0",
    "react-style-normalizer": "^1.2.6"
  },
  "peerDependencies": {
    "moment": ">=2.8.0",
    "react": ">=0.12.0"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/zippyui/react-time-picker.git"
  },
  "keywords": [
    "time",
    "picker",
    "time-picker",
    "react",
    "react-component"
  ],
  "author": {
    "name": "ZippyUI",
    "email": "contact@zippyui.com"
  },
  "contributors": [],
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/zippyui/react-time-picker/issues"
  },
  "homepage": "https://github.com/zippyui/react-time-picker",
  "readme": "# react-time-picker\n\n> A carefully crafted time picker for React\n\n## Install\n\n\n```sh\n$ npm install react-time-picker --save\n```\n\n## Demo\n\nSee [time picker demo](http://zippyui.github.io/react-time-picker/)\n\n## Usage\n\n```jsx\nvar TimePicker = require('./src')\n\nvar VALUE = '14:00:01'\n\nvar onChange = function(value){\n    picker.setProps({value: value})\n}\n\nvar picker = React.render(\n    <TimePicker\n        value={VALUE}\n        onChange={onChange}\n    />,\n    document.getElementById('content')\n)\n```\n\nFor uncontrolled behavior, use `defaultValue` instead of `value`\n\nThe time picker can also be used on touch devices.\n\n#### NOTES\n\nThe time picker depends on [ReactJS](https://www.npmjs.com/package/react) and [MomentJS](https://www.npmjs.com/package/moment).\n\nIf you use files from the dist folder:\n\n * `dist/react-time-picker.js`\n * `dist/react-time-picker.min.js`\n\nyou need to make sure you have `React` global var set\n\nIf you use the `.nomoment` files\n\n* `dist/react-time-picker.nomoment.js`\n* `dist/react-time-picker.nomoment.min.js`\n\nyou need to make sure you have both `React` and `moment` global vars set.\n\n## Properties\n\n * value: String - a time value - for controlled behavior\n * defaultValue: String - a time value - for uncontrolled behavior\n * onChange: Function(string, moment) - function to be called on change\n\n### Formatting\n\nThe time picker can display time in multiple formats. For example, you can show hour, hour & minute, hour & minute & second, and all of these with or without AM/PM.\n\nYou can specify a format to decide which parts of the time picker to display\n\n * format: String - See http://momentjs.com/docs/#/parsing/string-format/. A format that dictates which parts of the time picker are displayed.\n\n \tValid format tokens are:\n\n     * H or HH - 0..23 - 24 hour time (hour and double digit hour)\n \t * h or hh - 1..12 - 12 hour time used with `a A`\n \t * m or mm - 0..59 for minute and double digit minute\n \t * s or ss - 0..59 for second and double digit second\n \t * a or A  - for meridiem display\n\nSo you can decide what to display either by specifying a `format` or just use the appropriate formatting on the `value` you provide.\n\n#### Examples\n\n * If you want to display only hour & minute, specify a value string with hour and minute (eg: 16:03)\n * If you want to display hour, minute & second, specify eg 16:45:21\n * If you want to display AM/PM, specify an hour format that contains AM/PM eg 10:45 PM\n\n#### Overflowing\n\nBy default when minutes/seconds are incremented, and they overflow 59, the next amount is increased. You can also overflow hour to trigger a meridian change by using `overflowHourToMeridian`.\n\n#### Increment steps\n\nWhen time arrows are triggered, values are incremented with a certain amount - called step. The default `step` value is 1\n\n * step: Number\n * hourStep: Number - A step for incrementing hours (defaults to null). If not provided, `step` will be used when incrementing the hour\n * minuteStep: Number - A step for incrementing minutes (defaults to null). If not provided, `step` will be used when incrementing the minute\n * secondStep: Number - A step for incrementing seconds (defaults to null). If not provided, `step` will be used when incrementing the second\n\n#### Styling props\n\nThe time picker comes with built-in styles, no dependencies on external css files.\n\n * style\n\nBy default, the timepicker is 200px in width and has padding 10px. You can easily change that:\n\n```jsx\n<TimePicker style={{width: '100%', padding: 5}} />\n```\n\nStyles for time boxes (the div containing the input and the arrows)\n\n * boxStyle - style to be applied to all boxes (hour, minute, second, meridian)\n * hourStyle\n * minuteStyle\n * secondStyle\n * meridianStyle\n\nStyles for time input fields\n\n * hourInputStyle\n * minuteInputStyle\n * secondInputStyle\n * meridianInputStyle\n\n#### Other props\n\n * useArrowKeys: Boolean - defaults to true. When this prop is `true`, you can update time values with arrow up/down keys when field is focused. Set to `false` if you don't want this behavior\n * inputFactory: Function(props) - you can control how to render the time inputs, by using this function. It will be called with some props for the input:\n\n    * props.timeName: String - the name of the input ('hour', 'minute', etc)\n    * props.style - the style for the input\n    * props.value\n    * props.onChange\n    * props.onFocus\n    * props.onBlur\n\n \tChanging either `onChange`, `onFocus` or `onBlur` of the props passed in to `inputFactory` is not recommended. If you choose to change those, make sure you know what you're doing or you call the initial functions along with your own logic\n\n * showArrows: Boolean - decides whether to show arrows or not. Defaults to true\n * arrowStyle - style to be applied to all arrows\n * arrowUpStyle\n * arrowDownStyle\n * arrowOverStyle\n * arrowUpOverStyle\n * arrowDownOverStyle\n * arrowFactory\n * stepDelay: Number - defaults to 60. The amount of milliseconds between amount increments when mouse is down on an arrow\n * stopChangePropagation: Boolean - defaults to true. Stops the propagation of the `change` event on the inputs contained in the time picker. Needed so your `onChange` function will not get called multiple times, and with different arguments. Only modify this if you know what you're doing\n  * normalizeStyle: Boolean - defaults to true. Uses [react-style-normalizer](https://www.npmjs.com/package/react-style-normalizer) to prefix style names when needed. In this case, all style props are prefixed (style, inputStyle, hourStyle, etc... )\n\n\n## Contributing\n\nCheck out the project, cd into it and do\n\n```sh\n$ npm install\n$ npm run dev\n```\nNavigate to [localhost:8080](http://localhost:8080).\n\nChange the sources in the `src` directory. When a change is detected, the browser is auto refreshed.\n\nTo make a new build, execute `npm run build`, which refreshes the `lib` folder (for use with npm) from sources found in `src`, and also creates a concatenated file for use in the browser (minified version as well).\n\n## Roadmap\n\nSee [Roadmap](./ROADMAP.md)\n\n## Changelog\n\nSee [Changelog](./CHANGELOG.md)\n\n## License\n\n#### `MIT`",
  "readmeFilename": "README.md",
  "gitHead": "83a48ec7491ee1b9fdef3698276e162f61874391",
  "_id": "react-time-picker@1.1.0",
  "_shasum": "8444e460d0ebfeb1ec797372a71dcd1bb543ce3f",
  "_from": "react-time-picker@latest"
}
